#!/usr/bin/python
#
# Plots kneading invariant from kneading.h5 file that was generated by
# lorenz_sweep.
#
# Requires matplotlib (matplotlib.org)

import sys
import argparse

#----------------------------------------------------------------------------
# Parse commandline arguments
#----------------------------------------------------------------------------
parser = argparse.ArgumentParser(sys.argv[0])

parser.add_argument(
    '-f,--file', dest='hdf', default='kneading.h5',
    help='HDF5 file to process'
    )

parser.add_argument(
    '-b,--first', metavar='N', dest='first', type=int, default=1,
    help='Start of kneading subsequence to show (0-based)'
    )

parser.add_argument(
    '-e,--last', metavar='N', dest='last', type=int, default=63,
    help='End of kneading subsequence to show'
    )

parser.add_argument(
    '-q', dest='q', type=float, default=0.5,
    help='Ratio for kneading series'
    )

parser.add_argument(
    '-o,--output', dest='out',
    help='Save result to the specified file instead of plotting'
    )

parser.add_argument(
    '-c,--colormap', default='jet', dest='cm',
    help='matplotlib colormap'
    )

parser.add_argument(
    '-l,--levels', default=40, dest='levels',type=int,
    help='Number of colormap levels'
    )

args = parser.parse_args(sys.argv[1:])

#----------------------------------------------------------------------------
# Import matplotlib
#----------------------------------------------------------------------------
if args.out:
    import matplotlib
    matplotlib.use('Agg')

import h5py
from pylab import *

hdf = h5py.File(args.hdf, 'r')
seq = hdf['/K']

xmin = seq.attrs['xmin'][0]
xmax = seq.attrs['xmax'][0]

ymin = seq.attrs['ymin'][0]
ymax = seq.attrs['ymax'][0]

kbeg = args.first
kend = min(seq.attrs['kmax'][0], args.last + 1)

K = np.zeros(seq.shape)
for i in range(kbeg, kend):
    K += np.power(args.q, i) * (np.bitwise_and(seq, np.left_shift(1, i))).astype(bool)

#----------------------------------------------------------------------------
rc('text',   usetex=True)
rc('font',   family='serif')
rc('font',   serif='cm')
rc('font',   size=150)
rc('legend', fontsize=150)

#----------------------------------------------------------------------------
fig = figure(num=1, figsize=(100,100))

def discrete_cmap(N, base_cmap=None):
    """Create an N-bin discrete colormap from the specified input map"""

    # Note that if base_cmap is a string or None, you can simply do
    #    return plt.cm.get_cmap(base_cmap, N)
    # The following works for string, None, or a colormap instance:

    base = plt.cm.get_cmap(base_cmap)
    color_list = base(np.linspace(0, 1, N))
    cmap_name = base.name + str(N)
    return base.from_list(cmap_name, color_list, N)

imshow(K, extent=[xmin, xmax, ymin, ymax],
        aspect=(xmax - xmin) / (ymax - ymin), origin='lower',
        cmap=discrete_cmap(args.levels, args.cm))
colorbar()

xlabel('p1')
ylabel('p2')
title('Kneading range: \\{%s - %s\\}' % (kbeg, kend - 1),fontsize=200)

if args.out:
    savefig(args.out)
else:
    show()
